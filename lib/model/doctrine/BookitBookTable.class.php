<?php

/**
 * BookitBookTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BookitBookTable extends Doctrine_Table
{

  /**
   * Returns an instance of this class.
   *
   * @return object BookitBookTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('BookitBook');
  }

//  public function getActiveBooks(Doctrine_Query $q = null)
//  {
//    if (is_null($q)) {
//      $q = Doctrine_Query::create()
//              ->from('BookitBook j');
//    }
//
//    $q->andWhere('j.expires_at > ?', date('Y-m-d H:i:s', time()))
//            ->addOrderBy('j.expires_at DESC');
//
//    return $q->execute();
//  }




  public function retrieveActiveBook(Doctrine_Query $q)
  {
    return $this->addActiveBooksQuery($q)->fetchOne();
  }

  public function getActiveBooks(Doctrine_Query $q = null)
  {
    return $this->addActiveBooksQuery($q)->execute();
  }

  public function countActiveBooks(Doctrine_Query $q = null)
  {
    return $this->addActiveBooksQuery($q)->count();
  }

  public function addActiveBooksQuery(Doctrine_Query $q = null)
  {
    if (is_null($q)) {
      $q = Doctrine_Query::create()
              ->from('BookitBook j');
    }

    $alias = $q->getRootAlias();

    $q->andWhere($alias . '.expires_at > ?', date('Y-m-d H:i:s', time()))
            ->addOrderBy($alias . '.created_at DESC');

    return $q;
  }

  public function retrieveBackendBookList(Doctrine_Query $q)
  {
    $rootAlias = $q->getRootAlias();

    $q->leftJoin($rootAlias . '.BookitCategory c');

    return $q;
  }

  static public function getLuceneIndex()
  {
    ProjectConfiguration::registerZend();

    if (file_exists($index = self::getLuceneIndexFile())) {
      return Zend_Search_Lucene::open($index);
    }

    return Zend_Search_Lucene::create($index);
  }

  static public function getLuceneIndexFile()
  {
    return sfConfig::get('sf_data_dir') . '/book.' . sfConfig::get('sf_environment') . '.index';
  }

  public function getForLuceneQuery($query)
  {
    $hits = self::getLuceneIndex()->find($query);

    $pks = array();
    foreach ($hits as $hit) {
      $pks[] = $hit->pk;
    }

    if (empty($pks)) {
      return array();
    }

    $q = $this->createQuery('j')
            ->whereIn('j.id', $pks)
            ->limit(20);

    $q = $this->addActiveBooksQuery($q);

    return $q->execute();
  }

}